version: '3.8'

services:
  frontend:
    build: 
      context: ./way-esports/frontend
      dockerfile: Dockerfile
    ports:
      - "80:8080"
    environment:
      - NODE_ENV=production
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - way-esports-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  backend:
    build: 
      context: ./way-esports-backend
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - MONGODB_URI=${MONGODB_URI}
      - JWT_SECRET=${JWT_SECRET}
      - CORS_ORIGIN=${CORS_ORIGIN:-http://localhost}
      - BOT_TOKEN=${BOT_TOKEN}
      - TON_NETWORK=${TON_NETWORK:-mainnet}
    restart: unless-stopped
    networks:
      - way-esports-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    volumes:
      - backend_logs:/app/logs

  bot:
    build: 
      context: ./way-esports-bot
      dockerfile: Dockerfile
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=production
      - PORT=3002
      - BOT_TOKEN=${BOT_TOKEN}
      - MONGODB_URI=${MONGODB_URI}
      - BACKEND_URL=http://backend:3001
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost}
      - TON_NETWORK=${TON_NETWORK:-mainnet}
      - WEBHOOK_URL=${WEBHOOK_URL}
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - way-esports-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3002/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    volumes:
      - bot_logs:/app/logs

  # Nginx reverse proxy (опционально)
  nginx:
    image: nginx:alpine
    ports:
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
      - bot
    restart: unless-stopped
    networks:
      - way-esports-network

networks:
  way-esports-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  backend_logs:
    driver: local
  bot_logs:
    driver: local
  nginx_logs:
    driver: local