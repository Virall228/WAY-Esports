name: Deploy TimeWeb

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-frontend:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: way-esports/frontend/package-lock.json

      - name: Install dependencies
        working-directory: way-esports/frontend
        run: npm ci

      - name: Build frontend
        working-directory: way-esports/frontend
        run: |
          npm run build
          npm run build:zip

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: way-esports/frontend/dist/
          retention-days: 7

  build-backend:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: way-esports-backend/package-lock.json

      - name: Install dependencies
        working-directory: way-esports-backend
        run: npm ci

      - name: Build backend
        working-directory: way-esports-backend
        run: npm run build

      - name: Upload backend artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-build
          path: |
            way-esports-backend/dist/
            way-esports-backend/package.json
            way-esports-backend/package-lock.json
          retention-days: 7

  docker-build:
    needs: [build-frontend, build-backend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-on-server:
    needs: docker-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Add server to known_hosts
        run: |
          ssh-keyscan -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          timeout: 60s
          command_timeout: 15m
          debug: true
          script_stop: true
          script: |
            set -e
            echo "🚀 SSH connection successful!"
            echo "👤 User: $(whoami)"
            echo "📁 Current directory: $(pwd)"
            echo "🖥️  Server: $(hostname)"
            echo "📅 Date: $(date)"
            echo ""
            echo "🔄 Starting deployment..."
            
            # ---- МЕСТО ДЛЯ КОМАНД ДЕПЛОЯ ----
            cd ${{ secrets.REPO_PATH }}
            echo "📂 Changed to: $(pwd)"
            
            echo "📥 Pulling latest code..."
            git pull --rebase --autostash || true
            
            echo "🐳 Updating Docker containers..."
            docker compose pull || true
            docker compose up -d --build --remove-orphans
            
            echo "🧹 Cleaning up Docker..."
            docker system prune -f
            
            echo "✅ Deployment completed successfully!"
            echo ""
            echo "📊 Current status:"
            docker compose ps

      - name: Verify deployment
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          timeout: 60s
          command_timeout: 5m
          debug: true
          script: |
            echo "🔍 Verifying deployment..."
            cd ${{ secrets.REPO_PATH }}
            
            echo "📝 Latest commit on server:"
            git rev-parse --short HEAD
            git log -1 --pretty=format:"%h %ad %s" --date=iso
            
            echo ""
            echo "🐳 Docker containers status:"
            docker compose ps
            
            echo ""
            echo "📁 Frontend build presence:"
            if [ -d "way-esports/frontend/dist" ]; then
              echo "✅ Frontend dist found:"
              ls -lah way-esports/frontend/dist | head -n 5
            else
              echo "❌ Frontend dist not found"
            fi
            
            echo ""
            echo "🔗 Backend build presence:"
            if [ -d "way-esports-backend/dist" ]; then
              echo "✅ Backend dist found:"
              ls -lah way-esports-backend/dist | head -n 5
            else
              echo "❌ Backend dist not found"
            fi
