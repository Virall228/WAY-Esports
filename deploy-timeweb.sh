#!/bin/bash

# WAY Esports - Timeweb Cloud Deployment Script
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–ø–ª–æ–π –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤

set -e

echo "üöÄ WAY Esports - Timeweb Cloud Deployment"
echo "=========================================="

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[WARNING] $1${NC}"
}

error() {
    echo -e "${RED}[ERROR] $1${NC}"
    exit 1
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Docker
check_docker() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ Docker..."
    if ! command -v docker &> /dev/null; then
        error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."
    fi
    
    if ! command -v docker-compose &> /dev/null; then
        error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Compose –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."
    fi
    
    log "Docker –∏ Docker Compose –Ω–∞–π–¥–µ–Ω—ã ‚úÖ"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞
check_env() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
    if [ ! -f ".env" ]; then
        warn ".env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞—é –∏–∑ —à–∞–±–ª–æ–Ω–∞..."
        cp .env.production .env
        warn "–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env —Ñ–∞–π–ª –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞."
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    source .env
    
    if [ -z "$MONGODB_URI" ]; then
        error "MONGODB_URI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ"
    fi
    
    if [ -z "$JWT_SECRET" ] || [ ${#JWT_SECRET} -lt 32 ]; then
        error "JWT_SECRET –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 32 —Å–∏–º–≤–æ–ª–∞"
    fi
    
    if [ -z "$BOT_TOKEN" ]; then
        error "BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ"
    fi
    
    log "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã ‚úÖ"
}

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
stop_containers() {
    log "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    docker-compose -f docker-compose.prod.yml down --remove-orphans || true
    log "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã ‚úÖ"
}

# –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –æ–±—Ä–∞–∑–æ–≤
cleanup_images() {
    log "–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö Docker –æ–±—Ä–∞–∑–æ–≤..."
    docker system prune -f || true
    log "–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úÖ"
}

# –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤
build_images() {
    log "–°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤..."
    
    log "–°–±–æ—Ä–∫–∞ Frontend..."
    docker-compose -f docker-compose.prod.yml build frontend
    
    log "–°–±–æ—Ä–∫–∞ Backend..."
    docker-compose -f docker-compose.prod.yml build backend
    
    log "–°–±–æ—Ä–∫–∞ Bot..."
    docker-compose -f docker-compose.prod.yml build bot
    
    log "–í—Å–µ –æ–±—Ä–∞–∑—ã —Å–æ–±—Ä–∞–Ω—ã ‚úÖ"
}

# –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
start_containers() {
    log "–ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    docker-compose -f docker-compose.prod.yml up -d
    log "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã ‚úÖ"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤
check_health() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
    sleep 30
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Backend
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ Backend..."
    for i in {1..10}; do
        if curl -f http://localhost:3001/health &>/dev/null; then
            log "Backend —Ä–∞–±–æ—Ç–∞–µ—Ç ‚úÖ"
            break
        fi
        if [ $i -eq 10 ]; then
            error "Backend –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ—Å–ª–µ 10 –ø–æ–ø—ã—Ç–æ–∫"
        fi
        sleep 5
    done
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Bot
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ Bot..."
    for i in {1..10}; do
        if curl -f http://localhost:3002/health &>/dev/null; then
            log "Bot —Ä–∞–±–æ—Ç–∞–µ—Ç ‚úÖ"
            break
        fi
        if [ $i -eq 10 ]; then
            error "Bot –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ—Å–ª–µ 10 –ø–æ–ø—ã—Ç–æ–∫"
        fi
        sleep 5
    done
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Frontend
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ Frontend..."
    for i in {1..10}; do
        if curl -f http://localhost/health &>/dev/null; then
            log "Frontend —Ä–∞–±–æ—Ç–∞–µ—Ç ‚úÖ"
            break
        fi
        if [ $i -eq 10 ]; then
            error "Frontend –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ—Å–ª–µ 10 –ø–æ–ø—ã—Ç–æ–∫"
        fi
        sleep 5
    done
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram webhook
setup_webhook() {
    log "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram webhook..."
    
    source .env
    
    if [ -n "$WEBHOOK_URL" ] && [ -n "$BOT_TOKEN" ]; then
        WEBHOOK_RESPONSE=$(curl -s -X POST "https://api.telegram.org/bot${BOT_TOKEN}/setWebhook" \
            -H "Content-Type: application/json" \
            -d "{\"url\": \"${WEBHOOK_URL}\"}")
        
        if echo "$WEBHOOK_RESPONSE" | grep -q '"ok":true'; then
            log "Webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ ‚úÖ"
        else
            warn "–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook: $WEBHOOK_RESPONSE"
        fi
    else
        warn "WEBHOOK_URL –∏–ª–∏ BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É webhook"
    fi
}

# –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤
show_status() {
    log "–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:"
    echo ""
    docker-compose -f docker-compose.prod.yml ps
    echo ""
    
    log "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤:"
    docker stats --no-stream
    echo ""
    
    source .env
    log "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å–∞–º:"
    echo "üåê Frontend: http://localhost"
    echo "üîß Backend API: http://localhost:3001"
    echo "ü§ñ Bot: http://localhost:3002"
    if [ -n "$DOMAIN" ]; then
        echo "üåç Production: https://$DOMAIN"
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    log "–ù–∞—á–∏–Ω–∞–µ–º –¥–µ–ø–ª–æ–π WAY Esports –Ω–∞ Timeweb Cloud..."
    
    check_docker
    check_env
    stop_containers
    cleanup_images
    build_images
    start_containers
    check_health
    setup_webhook
    show_status
    
    log "üéâ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
    log "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –∞–¥—Ä–µ—Å–∞–º –≤—ã—à–µ."
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
case "${1:-}" in
    "stop")
        log "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
        docker-compose -f docker-compose.prod.yml down
        log "–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã ‚úÖ"
        ;;
    "restart")
        log "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
        docker-compose -f docker-compose.prod.yml restart
        log "–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã ‚úÖ"
        ;;
    "logs")
        log "–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
        docker-compose -f docker-compose.prod.yml logs -f
        ;;
    "status")
        show_status
        ;;
    "update")
        log "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
        git pull
        main
        ;;
    "clean")
        log "–ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞..."
        docker-compose -f docker-compose.prod.yml down -v --remove-orphans
        docker system prune -a -f
        log "–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úÖ"
        ;;
    *)
        main
        ;;
esac